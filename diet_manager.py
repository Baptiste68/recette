"""
Module de gestion des r√©gimes alimentaires et pr√©f√©rences nutritionnelles
"""

from typing import Set, List, Dict
from enum import Enum
from typing import Tuple

class RegimeAlimentaire(Enum):
    VEGETARIEN = ("vegetarian", "ü•¨", "V√©g√©tarien", "Pas de viande ni poisson")
    VEGAN = ("vegan", "üå±", "V√©gan", "Aucun produit animal")
    SANS_GLUTEN = ("gluten-free", "üåæ", "Sans gluten", "Sans bl√©, orge, seigle")
    CETOGENE = ("ketogenic", "ü•ë", "C√©tog√®ne", "Tr√®s faible en glucides")
    PALEO = ("paleo", "ü¶¥", "Pal√©o", "Aliments non transform√©s")
    SANS_LACTOSE = ("dairy-free", "ü•õ", "Sans lactose", "Sans produits laitiers")
    SANS_NOIX = ("tree-nut-free", "ü•ú", "Sans noix", "Sans fruits √† coque")
    PESCETARIEN = ("pescetarian", "üêü", "Pesc√©tarien", "V√©g√©tarien + poisson")
    MEDITERANNEEN = ("mediterranean", "ü´í", "M√©diterran√©en", "Riche en l√©gumes et huile d'olive")
    SANS_SUC_AJOUTE = ("low-sugar", "üçØ", "Sans sucre ajout√©", "Faible en sucres ajout√©s")

    def __init__(self, api_value, emoji, nom_affichage, description):
        self.api_value = api_value
        self.emoji = emoji
        self.nom_affichage = nom_affichage
        self.description = description

class Allergie(Enum):
    GLUTEN = ("gluten", "üåæ", "Gluten")
    LACTOSE = ("dairy", "ü•õ", "Lactose/Produits laitiers")
    OEUFS = ("egg", "ü•ö", "≈íufs")
    NOIX = ("tree nut", "ü•ú", "Noix et fruits √† coque")
    ARACHIDES = ("peanut", "ü•ú", "Arachides")
    POISSON = ("seafood", "üêü", "Poisson et fruits de mer")
    SOJA = ("soy", "ü´ò", "Soja")
    SESAME = ("sesame", "ü´ò", "S√©same")

    def __init__(self, api_value, emoji, nom_affichage):
        self.api_value = api_value
        self.emoji = emoji
        self.nom_affichage = nom_affichage

class DietManager:
    def __init__(self):
        self.regimes_actifs: Set[RegimeAlimentaire] = set()
        self.allergies_actives: Set[Allergie] = set()
        self.preferences = {
            'calories_max': None,
            'calories_min': None,
            'proteines_min': None,
            'lipides_max': None,
            'glucides_max': None,
            'niveau_difficulte': None  # easy, medium, hard
        }
    
    def ajouter_regime(self, regime: RegimeAlimentaire) -> bool:
        """Ajoute un r√©gime alimentaire"""
        # V√©rification de compatibilit√©
        if not self._verifier_compatibilite_regime(regime):
            return False
        
        self.regimes_actifs.add(regime)
        return True
    
    def retirer_regime(self, regime: RegimeAlimentaire):
        """Retire un r√©gime alimentaire"""
        self.regimes_actifs.discard(regime)
    
    def ajouter_allergie(self, allergie: Allergie):
        """Ajoute une allergie"""
        self.allergies_actives.add(allergie)
        # Auto-ajout des r√©gimes correspondants
        self._auto_ajouter_regimes_allergie(allergie)
    
    def retirer_allergie(self, allergie: Allergie):
        """Retire une allergie"""
        self.allergies_actives.discard(allergie)
    
    def _verifier_compatibilite_regime(self, nouveau_regime: RegimeAlimentaire) -> bool:
        """V√©rifie si un r√©gime est compatible avec les r√©gimes existants"""
        incompatibilites = {
            RegimeAlimentaire.VEGETARIEN: [RegimeAlimentaire.PESCETARIEN],
            RegimeAlimentaire.VEGAN: [RegimeAlimentaire.VEGETARIEN, RegimeAlimentaire.PESCETARIEN],
            RegimeAlimentaire.CETOGENE: [RegimeAlimentaire.MEDITERANNEEN],
        }
        
        if nouveau_regime in incompatibilites:
            for regime_existant in self.regimes_actifs:
                if regime_existant in incompatibilites[nouveau_regime]:
                    return False
        
        return True
    
    def _auto_ajouter_regimes_allergie(self, allergie: Allergie):
        """Ajoute automatiquement les r√©gimes correspondant aux allergies"""
        correspondances = {
            Allergie.LACTOSE: RegimeAlimentaire.SANS_LACTOSE,
            Allergie.GLUTEN: RegimeAlimentaire.SANS_GLUTEN,
            Allergie.NOIX: RegimeAlimentaire.SANS_NOIX,
            Allergie.ARACHIDES: RegimeAlimentaire.SANS_NOIX,
        }
        
        if allergie in correspondances:
            self.regimes_actifs.add(correspondances[allergie])
    
    def definir_preferences_nutritionnelles(self, **kwargs):
        """D√©finit les pr√©f√©rences nutritionnelles"""
        for key, value in kwargs.items():
            if key in self.preferences:
                self.preferences[key] = value
    
    def obtenir_regimes_api(self) -> List[str]:
        """Retourne les valeurs API des r√©gimes actifs"""
        return [regime.api_value for regime in self.regimes_actifs]
    
    def obtenir_allergies_api(self) -> List[str]:
        """Retourne les valeurs API des allergies actives"""
        return [allergie.api_value for allergie in self.allergies_actives]
    
    def obtenir_resume_preferences(self) -> str:
        """Retourne un r√©sum√© des pr√©f√©rences alimentaires"""
        resume = "üçΩÔ∏è VOS PR√âF√âRENCES ALIMENTAIRES\n"
        resume += "=" * 40 + "\n\n"
        
        if self.regimes_actifs:
            resume += "üìã R√âGIMES ALIMENTAIRES:\n"
            for regime in sorted(self.regimes_actifs, key=lambda x: x.nom_affichage):
                resume += f"   {regime.emoji} {regime.nom_affichage} - {regime.description}\n"
            resume += "\n"
        
        if self.allergies_actives:
            resume += "‚ö†Ô∏è ALLERGIES ET INTOL√âRANCES:\n"
            for allergie in sorted(self.allergies_actives, key=lambda x: x.nom_affichage):
                resume += f"   {allergie.emoji} {allergie.nom_affichage}\n"
            resume += "\n"
        
        # Pr√©f√©rences nutritionnelles
        prefs_definies = {k: v for k, v in self.preferences.items() if v is not None}
        if prefs_definies:
            resume += "üìä PR√âF√âRENCES NUTRITIONNELLES:\n"
            if prefs_definies.get('calories_min') or prefs_definies.get('calories_max'):
                cal_min = prefs_definies.get('calories_min', 'Non d√©fini')
                cal_max = prefs_definies.get('calories_max', 'Non d√©fini')
                resume += f"   üî• Calories: {cal_min} - {cal_max} kcal\n"
            if prefs_definies.get('proteines_min'):
                resume += f"   üí™ Prot√©ines min: {prefs_definies['proteines_min']}g\n"
            if prefs_definies.get('lipides_max'):
                resume += f"   ü•ë Lipides max: {prefs_definies['lipides_max']}g\n"
            if prefs_definies.get('glucides_max'):
                resume += f"   üçû Glucides max: {prefs_definies['glucides_max']}g\n"
            if prefs_definies.get('niveau_difficulte'):
                resume += f"   üë®‚Äçüç≥ Difficult√©: {prefs_definies['niveau_difficulte']}\n"
            resume += "\n"
        
        if not self.regimes_actifs and not self.allergies_actives and not prefs_definies:
            resume += "Aucune pr√©f√©rence d√©finie.\n"
            resume += "Configurez vos pr√©f√©rences pour des suggestions personnalis√©es !\n"
        
        return resume
    
    def obtenir_parametres_recherche_api(self) -> Dict:
        """Retourne les param√®tres pour les requ√™tes API"""
        params = {}
        
        # R√©gimes alimentaires
        if self.regimes_actifs:
            params['diet'] = ','.join(self.obtenir_regimes_api())
        
        # Allergies (intolerances dans l'API Spoonacular)
        if self.allergies_actives:
            params['intolerances'] = ','.join(self.obtenir_allergies_api())
        
        # Pr√©f√©rences nutritionnelles
        if self.preferences['calories_min']:
            params['minCalories'] = self.preferences['calories_min']
        if self.preferences['calories_max']:
            params['maxCalories'] = self.preferences['calories_max']
        if self.preferences['proteines_min']:
            params['minProtein'] = self.preferences['proteines_min']
        if self.preferences['lipides_max']:
            params['maxFat'] = self.preferences['lipides_max']
        if self.preferences['glucides_max']:
            params['maxCarbs'] = self.preferences['glucides_max']
        
        return params
    
    def valider_aliment_compatible(self, nom_aliment: str) -> Tuple[bool, str]:
        """
        V√©rifie si un aliment est compatible avec les r√©gimes et allergies
        
        Returns:
            Tuple[bool, str]: (compatible, raison_si_incompatible)
        """
        nom_lower = nom_aliment.lower()
        
        # V√©rification des allergies
        for allergie in self.allergies_actives:
            if self._aliment_contient_allergene(nom_lower, allergie):
                return False, f"Contient {allergie.nom_affichage} (allergie d√©clar√©e)"
        
        # V√©rification des r√©gimes
        for regime in self.regimes_actifs:
            if not self._aliment_compatible_regime(nom_lower, regime):
                return False, f"Non compatible avec le r√©gime {regime.nom_affichage}"
        
        return True, ""
    
    def _aliment_contient_allergene(self, nom_aliment: str, allergie: Allergie) -> bool:
        """V√©rifie si un aliment contient un allerg√®ne"""
        allergenes_mots_cles = {
            Allergie.GLUTEN: ['bl√©', 'farine', 'pain', 'p√¢tes', 'orge', 'seigle'],
            Allergie.LACTOSE: ['lait', 'fromage', 'yaourt', 'beurre', 'cr√®me'],
            Allergie.OEUFS: ['≈ìuf', 'oeuf'],
            Allergie.NOIX: ['noix', 'amande', 'noisette', 'pistache', 'cajou'],
            Allergie.ARACHIDES: ['arachide', 'cacahu√®te'],
            Allergie.POISSON: ['poisson', 'saumon', 'thon', 'crevette', 'homard'],
            Allergie.SOJA: ['soja', 'tofu'],
            Allergie.SESAME: ['s√©same', 'tahini']
        }
        
        if allergie in allergenes_mots_cles:
            return any(mot in nom_aliment for mot in allergenes_mots_cles[allergie])
        
        return False
    
    def _aliment_compatible_regime(self, nom_aliment: str, regime: RegimeAlimentaire) -> bool:
        """V√©rifie si un aliment est compatible avec un r√©gime"""
        
        # Aliments incompatibles par r√©gime
        incompatibles = {
            RegimeAlimentaire.VEGETARIEN: ['viande', 'porc', 'b≈ìuf', 'agneau', 'poisson', 'thon', 'saumon'],
            RegimeAlimentaire.VEGAN: ['viande', 'porc', 'b≈ìuf', 'agneau', 'poisson', 'lait', 'fromage', '≈ìuf', 'miel'],
            RegimeAlimentaire.PESCETARIEN: ['viande', 'porc', 'b≈ìuf', 'agneau', 'poulet'],
            RegimeAlimentaire.SANS_GLUTEN: ['bl√©', 'farine', 'pain', 'p√¢tes', 'orge', 'seigle'],
            RegimeAlimentaire.SANS_LACTOSE: ['lait', 'fromage', 'yaourt', 'beurre', 'cr√®me'],
        }
        
        if regime in incompatibles:
            return not any(mot in nom_aliment for mot in incompatibles[regime])
        
        return True
    
    def obtenir_suggestions_aliments(self, regime: RegimeAlimentaire = None) -> List[str]:
        """Retourne des suggestions d'aliments selon les pr√©f√©rences"""
        suggestions = {
            RegimeAlimentaire.VEGETARIEN: [
                'Tofu', 'Lentilles', 'Quinoa', '√âpinards', 'Avocat', 'Noix', 'Fromage'
            ],
            RegimeAlimentaire.VEGAN: [
                'Tofu', 'Lentilles', 'Quinoa', '√âpinards', 'Avocat', 'Amandes', 'Chou-fleur'
            ],
            RegimeAlimentaire.CETOGENE: [
                'Avocat', 'Saumon', '≈íufs', 'Brocoli', 'Fromage', 'Huile d\'olive', 'Noix'
            ],
            RegimeAlimentaire.MEDITERANNEEN: [
                'Tomates', 'Huile d\'olive', 'Poisson', 'L√©gumes verts', 'Herbes fra√Æches'
            ],
            RegimeAlimentaire.PALEO: [
                'Viande', 'Poisson', 'L√©gumes', 'Fruits', 'Noix', 'Graines', 'Huile de coco'
            ]
        }
        
        if regime and regime in suggestions:
            return suggestions[regime]
        elif self.regimes_actifs:
            # Retourne les suggestions du premier r√©gime actif
            premier_regime = next(iter(self.regimes_actifs))
            return suggestions.get(premier_regime, [])
        else:
            return ['L√©gumes vari√©s', 'Fruits de saison', 'Prot√©ines', 'C√©r√©ales compl√®tes']
    
    def reset_preferences(self):
        """Remet √† z√©ro toutes les pr√©f√©rences"""
        self.regimes_actifs.clear()
        self.allergies_actives.clear()
        for key in self.preferences:
            self.preferences[key] = None

    def afficher_resume_preferences(self, window):
        """Affiche le r√©sum√© des pr√©f√©rences alimentaires"""
        resume = self.obtenir_resume_preferences()
        return window.info_dialog("Vos pr√©f√©rences", resume)